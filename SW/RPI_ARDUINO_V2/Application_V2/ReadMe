Parto con un codice Arduino di base che si occupa di leggere i sensori multipli presenti sulla linea I2C.
Prende i dati, li wrappa in modo opportuno e li manda periodicamente indietro.
La ciclica è lenta, mando indietro ogni 1000ms
Questo è il tempo ciclo del controllo di temperatura fatto dal programma python di raspberry.

Poi farò la parte che legge i comandi che riceve e, n base a quelli, decide cosa fare.

Stepper: aggiungere funzionalità dell'abiltiazione/disabilitazione del modulo.


FILE:
python: app_prova_temperature.py
Arduino: Arduino.ino


Aggiungo l'infrastruttura per la gestione della persistenza dei parametri:
defaultConfiguration --> folder dentro cui carico i parametri di default per le varie tipologie.
currentConfiguration --> folder in cui salvo i parametri correnti (a valle della pressione di un tasto di Save Parameters nella pagina HTML di controllo HMI

dentro ci sono i file json che contengono le variabili persistenti in formato JSON.
Appena il programma parte prende di default l'ultimo set di parametri salvato in currentConfig.
Poi metto un tasto in HMI che permette di caricare i parametri (selezionando a mano il file).
Ho fatto una variabile globale che si chiama configuration, dove ci sono tutti i campi che voglio gestire in modo persistente.


next step è implementare il salvataggio periodico dei dati su un file.
Io farei un file per ogni giorno, sarà poi lo strumento di statistica a giostrare i dati.
Tasto, nella pagina dedicata, di clear statistics. Sarà buona norma, all'avvio della macchina, pulire la cartella delle statistiche.
folder delle statistiche Machine_Statistics.

02/07/2024
- messo chiamata a programma python esterno appInteractivePlot. Premo il tasto che lancia l'esecuzione di un programma che si occupa di fare i plot dei dati.

03/07/2024
- Dati da plottare nella zona delle statistiche:
* Sensore 1 - Sensore 2
* Sensore 3 - Sensore 4
* Umidità - Temperatura Bulbo umido
* min mean max temperature: mi predispongo nel caso di tanti sensori di temperatura, dove a colpo d'occhio posso vedere direttamente il minimo e il massimo valore, senza stare a cercare fra tutti i numeri.
* Tempo ultima girata - Numero Girate Uova
* Tempo dall'ultima girata - tempo mancante alla prossima girata
* Max temperature Reached - Min temperature reached (button for resetting these statistics)


Tasti:
TEMPERATURE
* Plot all data - Plot day data

HUMIDITY
* Plot all data - Plot day data

- aggiugnere la memorizzazione delle statistiche di temperatura

- impostare la pagina delle statistiche: visualizzare le temperature anche qui + mettere i tasti per i grafici e gestire handler. Da qui ci accorgiamo pian piano delle necessità
sulla visualizzazione dei grafici
- migliorare la visualizzazione senza buchi dei dati: problema del timestamp messo senza dati associati.


03/07/2024
debug del programma di plot per temperature e umidità
- da provare python interactive plot, perché ho cambiato gli argomenti
- cambiare la meomrizzazione dei file nelle due cartelle + implementare memorizzazione di temperature e umidità (memorizzazione flessibile in base al numero di sensori...)
- cambiare la chiamata al programma python esterno FATTO: ok per Ubuntu, lasciato in commento per windows

- aggiungere statistica del tempo di incubata/ore di incubata dal'inizio FATTO: messo anche il print corretto dei tempi

- impostare la comunicazione dei dati alla pagina machine_statistics.html FATTO: dipendentemente dalla pagina selezionata, python decide opportunamente che dati plottare
- FATTO memorizzare data umidità
- FATTO salvataggio dei parametri in cartella currentConfig + visualizzazione del json dei parametri correnti (così vedi anche quelli nascosti)
- FATTO uniformato i dizionari dei dati passati
- FATTO uniformato la visualizzazioen delle temperature
- FATTO: configuratore di comunicazione. Metti gli identificatori identifiers = ["TMP", "HUM", "HTP"] e poi si riempono automaticamente i dizionari, se dovesse variare il numero di identificatori.
  Ovviametne HTML e tipi di dizionari sono da configurare manualmente (temperature, umudità e temperature da dht22 sono i tre che ci sono ora). Se si inviano altri pacchetti di dati, allora si deve cambiare.


TO DO:
- chiamata a python3 per eseguire i plot
- correggere file delle persistenti, perché non ricordava i flags 
- quando ritorni alla pagina iniziale devi ripristinare le variabili di current config e non lasciare le selection vuote: la chiamata a webPageInitialization la faccio sempre, ogni volta che rientro in questa pagina. Ed invio alla web page 
  (+ di conseguenza gestione lato HTML) del payload contenente i dati persistenti. Solo quando si 'carica' la pagina, ovvero al suo avvio (ma non una volta e basta per sempre)

- plot raw dei dati + pulire outliers dovuti a mal-letture
- iniziare ad implementare un po' di logica nel periodicTask (sincronizzata con l'arrivo delle temperature)
- funzionalità manuale di attivazione/disattivazione forzata degli attuatori (periodiTask, ma indipendente dalle temperature)
- chat GPT: 'Dynamic TMP data Handling' ho fatto una chat dove cheido come gestire dinamicamente il numero di temperature che arrivano dalla comunicazione con arduino, se dovessi aumentare il numero di sensori senza stare a stravolgere il codice HTML ogni volta.
- chat GPT: class hysteresisControl --> applicabile al controllo di temperatura e al controllo di umidità
- per le statistiche delle temperature ho tutto embedded in hysteresisContorl ((massimo, minimo, media)


- implementare connessione remota
laser sempre acceso + fotoresistenza
diapley 7 segmenti per temp media
bit di alive: se rpy non comunica allora arduino off riscaldatori
- disabilitazione e abilitazione  dei riscaldatori + interruttori di bypass delle ventole, se producono troppo caldo.
- ventola di ricambio aria anti-sovratemperatura (anti temperature over-shoot fan)
- posizionamento orizzontale dei cestelli: metti una spunta che attiva la modalità di 'hatching', da qui comandi in manuale il motore avanti/intietro per posizionarlo come vuoi
(oppure aggiungiamo un sensore...ma non ne ho voglia.) Ricorda che se togli spunta devi ripendere a fare quello che stavi facendo.

allarme per raggiungimento di temperatura troppo alta
- inserimento statistiche uova: uova messe, uova tolte, uova nate, uova infeconde, uova non nate
- comandi manuali del motore: vai in automatico, vai in posizioe orizzontale, fai un giro, comando manuale, ritorna in automatico...

CIRCUITRY
- schema per iniziare a fare un quadro
- aggiunta delle termocoppie come sensori: DS18B20 non vanno bene
- usare il vemer come sicurezza: regolarlo a 38.2° per aprire il circuito della resistenza, se l'ambiente si dovesse scaldare troppo.

- interruttore generale 220V. interruttore ventola1 + interrutotre ventola2
- opto + relè per riscaldatore + in serie con il vemer (logica negativa per sicurezza)
- interruttore alimentatore PC (così puoi attivare le ventole senza la logica)








 
