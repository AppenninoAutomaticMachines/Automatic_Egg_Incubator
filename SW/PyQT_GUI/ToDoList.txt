VIDEO:
incubatrice V2
machine signaling device
messa in funzione
pagina dei messaggi
PID riscaldatore con SSR
PC817 circuitry


DA FARE:
serial_communication_is_ok fallo meglio...sull'alive, e non su qualunque cosa seriale. Altrimenti becca dentro tutto... 
        DA TESTARE: lavorato su questo bit serial_communication_is_ok = true;
fare bash per rpi che con 2click rilancia il tutto, ma da venv + installare pandaas
appena raggiungi il limite, allora update della visualizzazione del motore
        DA TESTARE: appena raggiugni finecorsa, allroa update della visualizazzione previous_rotation_state variabile locale in funzione di update


se ci sono troppi errori nei sensori, allora allarme e mandare il comando di stop all'heater  
stato del motore così posso pulire un po' il terminale
da fare: inibire le letture mentre si muove il motore?? fra 4 sensori e umidità non vorrei che si rallenti troppo (riguarda bito che avevo già fatto)

controllo che se vai semre on e la temperatura non aumenta di un tot, allora probabile errore su heater o porta aperta...
mettere un po' un filtro sui comandi dei relè...nel senso che se arrivano di fila true false arduino li filtra li tiene in memoria e li ridarta?
pensare al discorso dei parametri attuali che si salvano su un file, così se spengo e riaccendo riparto da lì


TORRETTA LUMINOSA:
        chatGPT --> classe che gestisce i messaggi machineSignaling + torretta luminosa + transistor
        FATTO: circuito con 4 transistor per alimentare i 3led + cicalino 12V (non voglio usare dei relè, ovviamente) PIN 23 25 27 29
        FATTO: sw arduino coi comandi.
        FATTO: montaggio su incubatrice
Usare arduinoEggINcubator perché è il sw di arduino che comincia a gestire anche lo stepper,mentre quello di prima di base dava indietro solo le temperature e i feedback degli induttori, ma poca roba, prendeva pochi comandi.
- controlli di sicurezza sulle temperature --> gestione dell'errore da fare. DOpo un po' spegni il riscaldatore
- premi i pulsanti di movimento dei motori e in automatico va in modalità manuale. Per ripristinare la modalità automatica devi cliccare un forceEggTurns, perché così riprendi esattametne da dove eri ripartito prima.

situazione in cui le temperature sono freezate
Ma è perché è molto stabile la temperatura o si sono bloccate??
Sezione messaggi
fare un bit di arduino pin tipo alive da avere feedback visivo

sw per sbaglio comando anche il hhc quando comando thc

- comando manuale perforzare humidifier (c'è già...verifica cablaggio)
- cablaggio pneumatica + montare humidifier anche senza sensore di livello



+ fare anche sw pyhton che gestisce le segnalazioni raccogliendo le varie situazioni... poi invia i comandi opportuni ad arduino
+ messa in servizio raspberry --> comando/controllo da remoto https://www.raspberrypi.com/news/raspberry-pi-connect/

backup del sensore di temperatura
        - cablaggio
        - se non trovi gli indirizzi esatti, allora bypass ordinamento (perché magari sostituisco un sensore)
Durata dell'incubata (file persistente)

AGGIUNGERE QUESTO CODICE: log in file persistente.
- fare una cartella nella direcroty del progetto che si chiama 'Log'
- tipi di messaggio:
1. INFO
Informational messages that highlight the progress of the application at a coarse-grained level. These are useful for tracking the general flow of the application.

2. DEBUG
Detailed information, typically of interest only when diagnosing problems. These messages are useful for developers to understand the internal state of the application.

3. WARNING
Indications that something unexpected happened, or indicative of some problem in the near future (e.g., ‘disk space low’). The software is still working as expected.

4. ERROR
Due to a more serious problem, the software has not been able to perform some function. These messages indicate a failure in the application.

5. CRITICAL
A serious error, indicating that the program itself may be unable to continue running. These messages are used for severe errors that require immediate attention.

6. ALARM
Specific to your application, this could be used to indicate conditions that require immediate attention but are not necessarily errors (e.g., temperature out of range).

7. EXCEPTION
Used to log exceptions that occur in the application. This can include stack traces and other debugging information.

- stamperemo in JSON format:
[
    {
        "timestamp": "2025-04-08 21:49:00",
        "error_type": "INFO",
        "message": "This is an informational message."
    },
    {
        "timestamp": "2025-04-08 21:50:00",
        "error_type": "WARNING",
        "message": "This is a warning message."
    },
    {
        "timestamp": "2025-04-08 21:51:00",
        "error_type": "ERROR",
        "message": "This is an error message."
    }
]

- ecco il codice da aggiungere:
import datetime
import os

# Create a Log folder if it doesn't exist
if not os.path.exists('Log'):
    os.makedirs('Log')

def log_message(error_type, message):
    """
    Logs a message to a log file named with the current date inside the Log folder in plain text format with sections.

    Args:
        error_type (str): The type of error (e.g., 'INFO', 'WARNING', 'ERROR').
        message (str): The message to log.
    """
    current_date = datetime.datetime.now().strftime('%Y-%m-%d')
    log_file = os.path.join('Log', f"log_{current_date}.txt")
    
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    with open(log_file, 'a') as file:
        file.write(f"--- Log Entry ---\n")
        file.write(f"Timestamp: {timestamp}\n")
        file.write(f"Error Type: {error_type}\n")
        file.write(f"Message: {message}\n")
        file.write(f"-----------------\n\n")

# Example usage:
log_message('INFO', 'This is an informational message.')
log_message('WARNING', 'This is a warning message.')
log_message('ERROR', 'This is an error message.')


CAMBIARE NOME LOG MESSAGE IN SERIAL FUNCTION per clarity







CODICE DI ERRORE da sistemare/gestire
Serial port closed successfully
Traceback (most recent call last):
  File "/home/filippo/Documents/PyQT_GUI/eggsIncubatorMVVM.py", line 85, in run
    dataRead = self.serial_port.read().decode('utf-8')
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc2 in position 0: unexpected end of data
Aborted

AGGIUNGERE QUESTO CODICE: sostituire la funzione di run()
def run(self):
    if not self.open_serial_port():
        print("Unable to open serial port after multiple attempts.")
        return

    buffer = ''
    startRx = False
    saving = False
    identifiers_data_list = []

    decode_error_count = 0
    decode_error_threshold = 10  # Number of decode errors before resetting serial port

    def log_error(msg):
        print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] ERROR: {msg}")

    try:
        while self.running:
            if self.serial_port.in_waiting > 0:
                try:
                    dataRead = self.serial_port.read().decode('utf-8')
                    decode_error_count = 0  # Reset error count on success
                except UnicodeDecodeError as e:
                    decode_error_count += 1
                    log_error(f"Decode error (#{decode_error_count}): {e}. Skipping and waiting for next '@'")
                    startRx = False
                    saving = False
                    buffer = ''

                    # Auto-reset serial port if too many errors
                    if decode_error_count >= decode_error_threshold:
                        log_error("Too many decode errors. Resetting serial port.")
                        self.close_serial_port()
                        time.sleep(1)
                        self.open_serial_port()
                        decode_error_count = 0
                    continue

                if dataRead == '@':
                    startRx = True
                    buffer = ''
                    identifiers_data_list.clear()
                elif startRx:
                    if dataRead == '<':
                        saving = True
                    if saving:
                        buffer += dataRead
                    if dataRead == '>':
                        saving = False
                        self.decode_message(buffer, identifiers_data_list)
                        buffer = ''
                    if dataRead == '#':
                        startRx = False
                        if identifiers_data_list:
                            self.data_received.emit(identifiers_data_list)
                            identifiers_data_list.clear()

            # Sending serial data
            while not self.command_queue.empty():
                command = self.command_queue.get()
                self.serial_port.write(command.encode('utf-8'))
                print(f"Sent to Arduino: {command}")

    except serial.SerialException as e:
        log_error(f"Serial error: {e}")
    finally:
        self.close_serial_port()


// --------------------- //
|                        |
|                        |
▼                        ▼
// --------------------- //
FATTO: montato schermo + supporto tastiera e mouse + raspberry
FATTO: pull down del comando di step per lo stepper motor
SENSORE TEMPERATURA ESTERNO
        - FATTO SW arduino
        - FATTO cablaggio PIN 20
        - FATTO QT Designer + anche parte in update
        - FATTO process_serial
FATO: grafico dell'azionamento ON/OFF degli attuatori heater e humidifier
FATTO: da gestire la temperatura del sensore di umidità
FATTO: plot delle humidità
FATTO: ingrandire un po' le stringhe di visualizzazione in GUI
FATTO: gestire rotation interval - sistemare spinbox del tempo di rotazione. Step di 5minuti, con min 5min massimo 180min (3h) + conseguente gestione corretta dello spinbox
FATTO: montare arduino MEGA
FATTO: radio button per forzature
FATTO: pulsante di reset delle statistiche MODIFICA: if self.current_button == "reset_statistics_T_btn": self.thc.reset_all_values()
FATTO: scrivere heater status, da GUI devo vedere se sto scaldando o no... MODIFICA: in all values [self.thc.get_output_control()] # pubblico l'heater status
              if {all_data[8]} == True:
        				self.ui.heaterStatus.setText(f"Heating ON!")
        			else:
        				self.ui.heaterStatus.setText(f"OFF")
FATTO: implementare codice arduino per DHT22 MODIFICA: inserito codice DHT22 e già messo in seriale, dovresti vedere tutto correttamente. Verificare

FATTO: outliers fuori dal range di temperatura, toglierli dal grafico
      MODIFICA: voglio fare una piccola spunta sull'interfaccia grafica, che se la spunti allora ti fa il plot con anche gli errori (li salvo comunque nei file). Di default la spunta non c'è e quindi a video vedi solo il grafico buono.
               Il range di valori buoni e anche questa spunta (flag true o false) anche questo è un valore che passo nella chiamata al programma, così il programma abilita o no l'esclusione dei valori non buoni dal plot
              QUindi modifico la chiamata al programma, mettendo altri tre input: min value, max value del range e True/False per abilitare/disabilitare il plot del range.
              Fatto tutto manca la spunta check box + gestione
      Aggiungere checkBox + gestione per questa spunta (una globale nella pagina del grafico), non sto a metterla dedicata

FATTO: la visualizzazzione di TON e TOFF, convertirli opportunamente in min o h MDIFICA: self.ui.timeOn_T.setText(format_time(all_data[5])) self.ui.timeOFF_T.setText(format_time(all_data[6]))
                      verificare il corretto funzionamento della funzione format_time e verifica che effettivamente si visualizzi per bene nella box della GUI






